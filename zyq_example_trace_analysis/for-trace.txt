[ ]{0:LDARGS}        main 命令行参数
[ 0 ]{1:CALL 0 5}          调用函数 0个参数 位置在5

			4是返回地址  -999是bp默认值
[ 0 4 -999 ]{5:INCSP 1}        为变量i分配空间
[ 0 4 -999 0 ]{7:GETBP}       bp=3
[ 0 4 -999 0 3 ]{8:CSTI 0}       0入栈
[ 0 4 -999 0 3 0 ]{10:ADD}   3+0=3     获取变量i
[ 0 4 -999 0 3 ]{11:CSTI 0}      0入栈 
[ 0 4 -999 0 3 0 ]{13:STI}     当前sp在下标5，sp-1为3，把下标3的值赋为0，并把
                                                  sp-1的位置赋为0
                 i
[ 0 4 -999 0 0 ]{14:INCSP -1}   释放空间    
[ 0 4 -999 0 ]{16:GOTO 45}         跳转到45
[ 0 4 -999 0 ]{45:GETBP}        bp=3
[ 0 4 -999 0 3 ]{46:CSTI 0}         0入栈
[ 0 4 -999 0 3 0 ]{48:ADD}        3+0=3
[ 0 4 -999 0 3 ]{49:LDI}          获取下标3的值为0，获取i的值
[ 0 4 -999 0 0 ]{50:CSTI 4}      4入栈
[ 0 4 -999 0 0 4 ]{52:LT}          0是否小于4
[ 0 4 -999 0 1 ]{53:IFNZRO 18}       小于，就跳转到18
[ 0 4 -999 0 ]{18:GETBP}          确实小于。   bp=3
[ 0 4 -999 0 3 ]{19:CSTI 0}      0入栈
[ 0 4 -999 0 3 0 ]{21:ADD}     3+0=3
[ 0 4 -999 0 3 ]{22:LDI}          获取下标3的值，即i的值=0
[ 0 4 -999 0 0 ]{23:PRINTI}         打印
0 [ 0 4 -999 0 0 ]{24:INCSP -1}       释放空间
[ 0 4 -999 0 ]{26:INCSP 0}         空操作，什么都不做
[ 0 4 -999 0 ]{28:GETBP}        bp=3
[ 0 4 -999 0 3 ]{29:CSTI 0}        0入栈
[ 0 4 -999 0 3 0 ]{31:ADD}      3+0=3
	↓这里开始i++的编译
                 i
[ 0 4 -999 0 3 ]{32:DUP}        复制3      【为了执行i++】
[ 0 4 -999 0 3 3 ]{33:LDI}              获取下标3的值=0          
[ 0 4 -999 0 3 0 ]{34:SWAP}        交换3和0
[ 0 4 -999 0 0 3 ]{35:DUP}         复制一个3
[ 0 4 -999 0 0 3 3 ]{36:LDI}         获取下标3的值为0
                          i的值
                          ↓
[ 0 4 -999 0 0 3 0 ]{37:CSTI 1}        1入栈
[ 0 4 -999 0 0 3 0 1 ]{39:ADD}        0+1=1 即i++
[ 0 4 -999 0 0 3 1 ]{40:STI}     当前sp在下标6，sp-1为3，把下标3的值赋为1，并把
                                                  sp-1的位置赋为1
                 i     计算出来i的值
                 ↓    ↓
[ 0 4 -999 1 0 1 ]{41:INCSP -1}      释放空间
[ 0 4 -999 1 0 ]{43:INCSP -1}          释放空间
[ 0 4 -999 1 ]{45:GETBP}    bp=3
[ 0 4 -999 1 3 ]{46:CSTI 0}         0入栈
[ 0 4 -999 1 3 0 ]{48:ADD}     3+0=3
[ 0 4 -999 1 3 ]{49:LDI}          获取下标3的值为1，获取i的值
[ 0 4 -999 1 1 ]{50:CSTI 4}      4入栈
[ 0 4 -999 1 1 4 ]{52:LT}        1是否小于4
[ 0 4 -999 1 1 ]{53:IFNZRO 18}       满足跳到18，继续循环
[ 0 4 -999 1 ]{18:GETBP}       bp=3
[ 0 4 -999 1 3 ]{19:CSTI 0}         0入栈
[ 0 4 -999 1 3 0 ]{21:ADD}       3+0=3
[ 0 4 -999 1 3 ]{22:LDI}       获取下标3的值为1，即i=1
[ 0 4 -999 1 1 ]{23:PRINTI}          打印
1 [ 0 4 -999 1 1 ]{24:INCSP -1}       释放空间
[ 0 4 -999 1 ]{26:INCSP 0}         空操作
[ 0 4 -999 1 ]{28:GETBP}      bp=3
[ 0 4 -999 1 3 ]{29:CSTI 0}          0入栈
[ 0 4 -999 1 3 0 ]{31:ADD}    3+0=3
[ 0 4 -999 1 3 ]{32:DUP}        复制3
[ 0 4 -999 1 3 3 ]{33:LDI}       获取下标3的值，即i=1
                 i
[ 0 4 -999 1 3 1 ]{34:SWAP}     交换3和1
[ 0 4 -999 1 1 3 ]{35:DUP}       复制一个3
[ 0 4 -999 1 1 3 3 ]{36:LDI}          获取下标3的值，即i=1
[ 0 4 -999 1 1 3 1 ]{37:CSTI 1}     1入栈
[ 0 4 -999 1 1 3 1 1 ]{39:ADD}    1+1=2
[ 0 4 -999 1 1 3 2 ]{40:STI}    当前sp在下标6，sp-1为3，把下标3的值赋为2，并把
                                                  sp-1的位置赋为2
[ 0 4 -999 2 1 2 ]{41:INCSP -1}          释放空间
[ 0 4 -999 2 1 ]{43:INCSP -1}           释放空间
[ 0 4 -999 2 ]{45:GETBP}      bp=3
[ 0 4 -999 2 3 ]{46:CSTI 0}        0入栈
[ 0 4 -999 2 3 0 ]{48:ADD}      3+0=3
[ 0 4 -999 2 3 ]{49:LDI}      获取下标3的值为2，即获取i的值
[ 0 4 -999 2 2 ]{50:CSTI 4}         4入栈
[ 0 4 -999 2 2 4 ]{52:LT}     2是否小于4
[ 0 4 -999 2 1 ]{53:IFNZRO 18}    满足跳到18,继续循环
[ 0 4 -999 2 ]{18:GETBP}
[ 0 4 -999 2 3 ]{19:CSTI 0}
[ 0 4 -999 2 3 0 ]{21:ADD}
[ 0 4 -999 2 3 ]{22:LDI}
[ 0 4 -999 2 2 ]{23:PRINTI}
2 [ 0 4 -999 2 2 ]{24:INCSP -1}
[ 0 4 -999 2 ]{26:INCSP 0}
[ 0 4 -999 2 ]{28:GETBP}
[ 0 4 -999 2 3 ]{29:CSTI 0}
[ 0 4 -999 2 3 0 ]{31:ADD}
[ 0 4 -999 2 3 ]{32:DUP}
[ 0 4 -999 2 3 3 ]{33:LDI}
[ 0 4 -999 2 3 2 ]{34:SWAP}
[ 0 4 -999 2 2 3 ]{35:DUP}
[ 0 4 -999 2 2 3 3 ]{36:LDI}
[ 0 4 -999 2 2 3 2 ]{37:CSTI 1}
[ 0 4 -999 2 2 3 2 1 ]{39:ADD}
[ 0 4 -999 2 2 3 3 ]{40:STI}
[ 0 4 -999 3 2 3 ]{41:INCSP -1}
[ 0 4 -999 3 2 ]{43:INCSP -1}
[ 0 4 -999 3 ]{45:GETBP}
[ 0 4 -999 3 3 ]{46:CSTI 0}
[ 0 4 -999 3 3 0 ]{48:ADD}
[ 0 4 -999 3 3 ]{49:LDI}
[ 0 4 -999 3 3 ]{50:CSTI 4}
[ 0 4 -999 3 3 4 ]{52:LT}
[ 0 4 -999 3 1 ]{53:IFNZRO 18}
[ 0 4 -999 3 ]{18:GETBP}
[ 0 4 -999 3 3 ]{19:CSTI 0}
[ 0 4 -999 3 3 0 ]{21:ADD}
[ 0 4 -999 3 3 ]{22:LDI}
[ 0 4 -999 3 3 ]{23:PRINTI}
3 [ 0 4 -999 3 3 ]{24:INCSP -1}
[ 0 4 -999 3 ]{26:INCSP 0}
[ 0 4 -999 3 ]{28:GETBP}
[ 0 4 -999 3 3 ]{29:CSTI 0}
[ 0 4 -999 3 3 0 ]{31:ADD}
[ 0 4 -999 3 3 ]{32:DUP}
[ 0 4 -999 3 3 3 ]{33:LDI}
[ 0 4 -999 3 3 3 ]{34:SWAP}
[ 0 4 -999 3 3 3 ]{35:DUP}
[ 0 4 -999 3 3 3 3 ]{36:LDI}
[ 0 4 -999 3 3 3 3 ]{37:CSTI 1}
[ 0 4 -999 3 3 3 3 1 ]{39:ADD}
[ 0 4 -999 3 3 3 4 ]{40:STI}
[ 0 4 -999 4 3 4 ]{41:INCSP -1}
[ 0 4 -999 4 3 ]{43:INCSP -1}
[ 0 4 -999 4 ]{45:GETBP}
[ 0 4 -999 4 3 ]{46:CSTI 0}
[ 0 4 -999 4 3 0 ]{48:ADD}
[ 0 4 -999 4 3 ]{49:LDI}
[ 0 4 -999 4 4 ]{50:CSTI 4}
[ 0 4 -999 4 4 4 ]{52:LT}
[ 0 4 -999 4 0 ]{53:IFNZRO 18}   不满足i<4退出循环
[ 0 4 -999 4 ]{55:INCSP -1}
[ 0 4 -999 ]{57:RET -1}
[ 0 -999 ]{4:STOP}