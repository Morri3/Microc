[ ]{0:LDARGS}        main 命令行参数
[ 0 ]{1:CALL 0 5}          调用函数 0个参数 位置在5

			4是返回地址  -999是bp默认值
[ 0 4 -999 ]{5:INCSP 1}         变量x分配空间
[ 0 4 -999 0 ]{7:GETBP}         bp=3
[ 0 4 -999 0 3 ]{8:CSTI 0}       0入栈
[ 0 4 -999 0 3 0 ]{10:ADD}     3+0=3
[ 0 4 -999 0 3 ]{11:CSTI 1}     1入栈
[ 0 4 -999 0 3 1 ]{13:STI}      当前sp在下标5，sp-1为3，把下标3的值赋为1，并把
                                                  sp-1的位置赋为1  .
	对应int x=1;
[ 0 4 -999 1 1 ]{14:INCSP -1}   释放空间
[ 0 4 -999 1 ]{16:GETBP}       bp=3
[ 0 4 -999 1 3 ]{17:CSTI 0}      0入栈
[ 0 4 -999 1 3 0 ]{19:ADD}     3+0=3
[ 0 4 -999 1 3 ]{20:DUP}     复制一个3
[ 0 4 -999 1 3 3 ]{21:LDI}         获取下标3的值=1
[ 0 4 -999 1 3 1 ]{22:SWAP}      交换地址3和值1
[ 0 4 -999 1 1 3 ]{23:DUP}      复制一个地址3
[ 0 4 -999 1 1 3 3 ]{24:LDI}         获取下标3的值=1
[ 0 4 -999 1 1 3 1 ]{25:CSTI 1}     1入栈
[ 0 4 -999 1 1 3 1 1 ]{27:ADD}       1+1=2
[ 0 4 -999 1 1 3 2 ]{28:STI}      当前sp在下标6，sp-1为3，把下标3的值赋为2，并把
                                                  sp-1的位置赋为2
			对应x++;
[ 0 4 -999 2 1 2 ]{29:INCSP -1}  释放空间
[ 0 4 -999 2 1 ]{31:PRINTI}       打印
1 [ 0 4 -999 2 1 ]{32:INCSP -1}     释放空间
[ 0 4 -999 2 ]{34:INCSP 0}        空操作
[ 0 4 -999 2 ]{36:GOTO 58}      跳转到58
[ 0 4 -999 2 ]{58:GETBP}          bp=3
[ 0 4 -999 2 3 ]{59:CSTI 0}           0入栈
[ 0 4 -999 2 3 0 ]{61:ADD}        3+0=3
[ 0 4 -999 2 3 ]{62:LDI}         获取下标3的值，即x的值=2
[ 0 4 -999 2 2 ]{63:CSTI 4}        4入栈
[ 0 4 -999 2 2 4 ]{65:LT}       2是否小于4
[ 0 4 -999 2 1 ]{66:IFNZRO 38}   满足跳转到38，循环
[ 0 4 -999 2 ]{38:GETBP}        bp=3
[ 0 4 -999 2 3 ]{39:CSTI 0}       0入栈
[ 0 4 -999 2 3 0 ]{41:ADD}     3+0=3
[ 0 4 -999 2 3 ]{42:DUP}        复制地址3
[ 0 4 -999 2 3 3 ]{43:LDI}        获取下标3的值
[ 0 4 -999 2 3 2 ]{44:SWAP}      交换地址3和值2
[ 0 4 -999 2 2 3 ]{45:DUP}      复制一份地址3
[ 0 4 -999 2 2 3 3 ]{46:LDI}        获取下标3的值，即x的值=2
[ 0 4 -999 2 2 3 2 ]{47:CSTI 1}    1入栈
[ 0 4 -999 2 2 3 2 1 ]{49:ADD}       2+1=3
[ 0 4 -999 2 2 3 3 ]{50:STI}       当前sp在下标6，sp-1为3，把下标3的值赋为3，并把
                                                  sp-1的位置赋为3
				对应x++
[ 0 4 -999 3 2 3 ]{51:INCSP -1}    释放空间
[ 0 4 -999 3 2 ]{53:PRINTI}       打印
2 [ 0 4 -999 3 2 ]{54:INCSP -1}        释放空间
[ 0 4 -999 3 ]{56:INCSP 0}     空操作
[ 0 4 -999 3 ]{58:GETBP}       bp=3
[ 0 4 -999 3 3 ]{59:CSTI 0}     0入栈
[ 0 4 -999 3 3 0 ]{61:ADD}    3+0=3
[ 0 4 -999 3 3 ]{62:LDI}       获取下标3的值，即x的值=3
[ 0 4 -999 3 3 ]{63:CSTI 4}       4入栈
[ 0 4 -999 3 3 4 ]{65:LT}        3是否小于4
[ 0 4 -999 3 1 ]{66:IFNZRO 38}      满足跳到38，循 环
[ 0 4 -999 3 ]{38:GETBP}     bp=3
[ 0 4 -999 3 3 ]{39:CSTI 0}       0入栈
[ 0 4 -999 3 3 0 ]{41:ADD}      3+0=3
[ 0 4 -999 3 3 ]{42:DUP}     复制一地址3
[ 0 4 -999 3 3 3 ]{43:LDI}        获取下标3的值=3，即x=3
[ 0 4 -999 3 3 3 ]{44:SWAP}      交换地址3和值3
[ 0 4 -999 3 3 3 ]{45:DUP}      复制一份地址3
[ 0 4 -999 3 3 3 3 ]{46:LDI}     获取下标3 的值=3
[ 0 4 -999 3 3 3 3 ]{47:CSTI 1}       1入栈
[ 0 4 -999 3 3 3 3 1 ]{49:ADD}     3+1=4
[ 0 4 -999 3 3 3 4 ]{50:STI}    当前sp在下标6，sp-1为3，把下标3的值赋为4，并把
                                                  sp-1的位置赋为4
	对应x++
[ 0 4 -999 4 3 4 ]{51:INCSP -1}    释放空间
[ 0 4 -999 4 3 ]{53:PRINTI}      打印
3 [ 0 4 -999 4 3 ]{54:INCSP -1}     释放空间
[ 0 4 -999 4 ]{56:INCSP 0}          空操作
[ 0 4 -999 4 ]{58:GETBP}           bp=3
[ 0 4 -999 4 3 ]{59:CSTI 0}         0入栈
[ 0 4 -999 4 3 0 ]{61:ADD}         3+0=3
[ 0 4 -999 4 3 ]{62:LDI}           获取下标3的值，即x=4
[ 0 4 -999 4 4 ]{63:CSTI 4}          4入栈
[ 0 4 -999 4 4 4 ]{65:LT}          4是否小于4
[ 0 4 -999 4 0 ]{66:IFNZRO 38}       不满足，就执行68
[ 0 4 -999 4 ]{68:INCSP -1}          释放空间
[ 0 4 -999 ]{70:RET -1}      返回
[ 0 -999 ]{4:STOP}